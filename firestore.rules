/**
 * @file Firestore Security Rules for BookEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data stored under the `/users/{userId}` path. This
 * ensures that users can only read and modify their own profiles.
 *
 * Data Structure:
 * All user data is stored under the `/users/{userId}` collection, where `{userId}`
 * corresponds to the Firebase Auth UID of the user.  This structure simplifies
 * the security rules and ensures that each user's data is isolated from others.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent unauthorized access to user data.
 * - Self-creation is allowed for user documents.
 * - All write operations are strictly controlled by the `isOwner()` function,
 *   which verifies that the requesting user's UID matches the `{userId}` in
 *   the path.
 *
 * Denormalization for Authorization:
 * The `userId` is denormalized in the path `/users/{userId}`. This allows us to
 * use `request.auth.uid` for authorization without needing to read any
 * additional data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc if the 'id' field matches the UID.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile at /users/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the userId matches their auth UID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow a user to get their own profile
      allow get: if isOwner(userId);

      // Allow a user to list their own profile - Denied to protect data.
      allow list: if isOwner(userId);

      // Allow a user to update their own profile if they are the owner and the document exists. Enforces immutability of the 'id' field.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile if they are the owner and the document exists
      allow delete: if isExistingOwner(userId);
    }
  }
}